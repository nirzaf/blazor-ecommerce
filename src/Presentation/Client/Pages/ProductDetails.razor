@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@implements IDisposable

@if (_product == null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            @if (!string.IsNullOrEmpty(_product.ImageUrl))
            {
                <img class="media-img" src="@_product.ImageUrl" alt="@_product.Title" />
            }
            else
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@_product.Images" Style="height: 200px;">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>>
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (_product.Variants is { Count: > 1 })
            {
                <div class="mb-3">
                    <select class="form-select" @bind="_currentTypeId">
                        @foreach (var variant in _product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType?.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>

}

@code {
    [Inject]
    public HttpInterceptorService? Interceptor { get; set; }

    private ProductDto? _product = null;
    private string _message = string.Empty;
    private int _currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Interceptor.RegisterEvent();

        _message = "Loading product...";

        var result = await ProductService.GetProduct(Id);

        if (result != null)
        {
            if (result.Success)
            {
                _product = result.Data;
                if (_product.Variants.Count > 0)
                {
                    _currentTypeId = _product.Variants[0].ProductTypeId;
                }
            }
            else
            {
                _message = result.Messages.FirstOrDefault();
            }
        }
    }

    private ProductVariantDto GetSelectedVariant()
    {
        var variant = _product.Variants.FirstOrDefault(v => v.ProductTypeId == _currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItemDto
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }
}
